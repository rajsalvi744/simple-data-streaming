x-spark-common: &spark-common
  image: bitnami/spark:3.5.0
  volumes:
    - ./jobs:/opt/bitnami/spark/jobs
  networks:
    - alpha

services:
  kafka-gen:
    image: confluentinc/cp-server:latest
    hostname: kafka-gen
    container_name: kafka-gen
    volumes:
      - ./scripts/create_cluster_id.sh:/tmp/create_cluster_id.sh
      - ./clusterID:/tmp/clusterID
    command: "bash -c '/tmp/create_cluster_id.sh'"
    networks:
      - alpha

  broker:
    image: confluentinc/cp-server:latest
    hostname: broker
    container_name: broker
    depends_on:
      kafka-gen:
        condition: service_completed_successfully
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    volumes:
      - ./scripts/update_run.sh:/tmp/update_run.sh
      - ./clusterID:/tmp/clusterID
    command: "bash -c '/tmp/update_run.sh && /etc/confluent/docker/run'"
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 9092" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - alpha


  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://localhost:8081
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - alpha


  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://localhost:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    healthcheck:
      test: [ "CMD","curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - alpha

#  postgres:
#    image: postgres:latest
#    container_name: postgres
#    ports:
#      - "5432:5342"
#    environment:
#      - POSTGRES_USER=airflow
#      - POSTGRES_PASSWORD=airflow
#      - POSTGRES_DB=airflow
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-U", "airflow" ]
#      timeout: 60s
#      interval: 60s
#      retries: 5
#    restart: always
#    networks:
#      - alpha
#
#  webserver:
#    image: apache/airflow:latest-python3.11
#    container_name: webserver
#    command: webserver
#    build:
#      context: .
#      dockerfile: Dockerfile
#    depends_on:
#      postgres:
#        condition: service_healthy
#      scheduler:
#        condition: service_healthy
#    environment:
#      - AIRFLOW__CORE__LOAD_EXAMPLES=False
#      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
#      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
#      - AIRFLOW__WEBSERVER__SECRET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho
#      - AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT=600
#      - AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT=600
#    logging:
#      options:
#        max-size: 10m
#        max-file: "3"
#    volumes:
#      - ./dags:/opt/airflow/dags
#      - ./jobs:/opt/airflow/jobs
#    ports:
#      - "8080:8080"
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    networks:
#      - alpha
#
#  scheduler:
#    image: apache/airflow:latest-python3.11
#    build:
#      context: .
#      dockerfile: Dockerfile
#    container_name: scheduler
#    depends_on:
#      - postgres
#    environment:
#      - AIRFLOW__CORE__LOAD_EXAMPLES=False
#      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
#      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
#      - AIRFLOW__WEBSERVER__SECRET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho
#      - AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT=1000
#      - AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT=1000
#    volumes:
#      - ./dags:/opt/airflow/dags
#      - ./jobs:/opt/airflow/jobs
#    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Raj --lastname Salvi --role Admin --email salviraj123@outlook.com --password admin && airflow scheduler"
#    healthcheck:
#      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
#      interval: 60s
#      timeout: 30s
#      retries: 5
#      start_period: 30s
#    networks:
#      - alpha

  spark-master:
    <<: *spark-common
    container_name: spark-master
    build:
      context: ./spark
      dockerfile: ./Dockerfile
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
    networks:
      - alpha

  spark-worker:
    <<: *spark-common
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      SPARK_MASTER_URL: spark://spark-master:7077
    networks:
      - alpha

  cassandra_db:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    networks:
      - alpha

networks:
  alpha:


